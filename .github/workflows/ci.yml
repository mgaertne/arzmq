on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --each-feature --clean-per-run

  check-tests:
    name: Check (tests)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --each-feature --clean-per-run --tests

  check-examples:
    name: Check (examples)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --each-feature --clean-per-run --examples

  clippy:
    name: Clippy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: clippy
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack clippy --each-feature --clean-per-run -- -D warnings

  clippy-tests:
    name: Clippy (tests)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: clippy
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack clippy --each-feature --clean-per-run --tests -- -D warnings

  clippy-examples:
    name: Clippy (examples)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: clippy
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack clippy --each-feature --clean-per-run --examples -- -D warnings

  rust-doc:
    name: rust-documentation
    runs-on: ubuntu-latest
    needs: [ check, clippy ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: cargo doc --no-deps --all-features

  tests:
    name: unit and doctests

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    needs: [ check, check-tests, clippy, clippy-tests ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - name: install linux dependencies for optional features
        if: runner.os == 'Linux'
        run: sudo apt-get install -y libsodium-dev libkrb5-dev autoconf
      - name: install macos dependencies for optional features
        if: runner.os == 'macOS'
        run: brew install libsodium automake libtool autoconf
      - name: install windows dependencies for optional features
        if: runner.os == 'Windows'
        uses: johnwason/vcpkg-action@v7
        with:
          pkgs: 'libsodium'
          triplet: 'x64-windows-static'
          token: ${{ github.token }}
      - name: install windows dependencies for optional features
        if: runner.os == 'Windows'
        uses: johnwason/vcpkg-action@v7
        with:
          pkgs: 'krb5'
          triplet: 'x64-windows'
          token: ${{ github.token }}
      - run: cargo hack test --each-feature --clean-per-run --verbose
        if: runner.os == 'macOS'
        env:
          SYSTEM_DEPS_GSSAPI_LIB_FRAMEWORK: Kerberos
          SYSTEM_DEPS_GSSAPI_NO_PKG_CONFIG: 1
      - run: cargo hack test --each-feature --clean-per-run --verbose
        if: runner.os == 'Windows'
        env:
          VCPKG_CONFIG_DIR: ${{ github.workspace }}/vcpkg
      - run: cargo hack test --each-feature --clean-per-run --verbose
        if: runner.os == 'Linux'

  examples:
    name: examples
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: version
        run: cargo run --release --verbose --example version
      - name: pair_pair
        run: cargo run --release --verbose --example pair_pair
      - name: push_pull
        run: cargo run --release --verbose --example push_pull
      - name: publish_subscribe
        run: cargo run --release --verbose --example publish_subscribe
      - name: publish_xsubscribe
        run: cargo run --release --verbose --example publish_xsubscribe
      - name: xpublish_subscribe
        run: cargo run --release --verbose --example xpublish_subscribe
      - name: xpublish_xsubscribe
        run: cargo run --release --verbose --example xpublish_xsubscribe
      - name: request_reply
        run: cargo run --release --verbose --example request_reply
      - name: request_router
        run: cargo run --release --verbose --example request_router
      - name: dealer_reply
        run: cargo run --release --verbose --example dealer_reply
      - name: dealer_router
        run: cargo run --release --verbose --example dealer_router
      - name: dealer_dealer
        run: cargo run --release --verbose --example dealer_dealer
      - name: stream_client
        run: cargo run --release --verbose --example stream_client
      - name: stream_server
        run: cargo run --release --verbose --example stream_server

  examples-draft-api:
    name: examples (Draft API)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: version
        run: cargo run --release --verbose --features examples-draft-api --example version
      - name: pair_pair
        run: cargo run --release --verbose --features examples-draft-api --example pair_pair
      - name: push_pull
        run: cargo run --release --verbose --features examples-draft-api --example push_pull
      - name: publish_subscribe
        run: cargo run --release --verbose --features examples-draft-api --example publish_subscribe
      - name: publish_xsubscribe
        run: cargo run --release --verbose --features examples-draft-api --example publish_xsubscribe
      - name: xpublish_subscribe
        run: cargo run --release --verbose --features examples-draft-api --example xpublish_subscribe
      - name: xpublish_xsubscribe
        run: cargo run --release --verbose --features examples-draft-api --example xpublish_xsubscribe
      - name: request_reply
        run: cargo run --release --verbose --features examples-draft-api --example request_reply
      - name: request_router
        run: cargo run --release --verbose --features examples-draft-api --example request_router
      - name: dealer_reply
        run: cargo run --release --verbose --features examples-draft-api --example dealer_reply
      - name: dealer_router
        run: cargo run --release --verbose --features examples-draft-api --example dealer_router
      - name: dealer_dealer
        run: cargo run --release --verbose --features examples-draft-api --example dealer_dealer
      - name: stream_client
        run: cargo run --release --verbose --features examples-draft-api --example stream_client
      - name: stream_server
        run: cargo run --release --verbose --features examples-draft-api --example stream_server
      - name: channel_channel
        run: cargo run --release --verbose --features examples-draft-api --example channel_channel
      - name: scatter_gather
        run: cargo run --release --verbose --features examples-draft-api --example scatter_gather
      - name: client_server
        run: cargo run --release --verbose --features examples-draft-api --example client_server
      - name: radio_dish
        run: cargo run --release --verbose --features examples-draft-api --example radio_dish
      - name: peer_peer
        run: cargo run --release --verbose --features examples-draft-api --example peer_peer

  examples-tokio:
    name: examples (tokio)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: publish_subscribe_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example publish_subscribe_async_tokio
      - name: request_reply_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example request_reply_async_tokio
      - name: dealer_reply_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example dealer_reply_async_tokio
      - name: request_router_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example request_router_async_tokio
      - name: dealer_dealer_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example dealer_dealer_async_tokio
      - name: dealer_router_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example dealer_router_async_tokio
      - name: publish_xsubscribe_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example publish_xsubscribe_async_tokio
      - name: xpublish_subscribe_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example xpublish_subscribe_async_tokio
      - name: xpublish_xsubscribe_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example xpublish_xsubscribe_async_tokio
      - name: push_pull_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example push_pull_async_tokio
      - name: pair_pair_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example pair_pair_async_tokio
      - name: stream_client_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example stream_client_async_tokio
      - name: stream_server_async_tokio
        run: cargo run --features examples-tokio --release --verbose --example stream_server_async_tokio
      - name: peer_peer_async_tokio
        run: cargo run --features "examples-tokio,draft-api" --release --verbose --example peer_peer_async_tokio
      - name: channel_channel_async_tokio
        run: cargo run --features "examples-tokio,draft-api" --release --verbose --example channel_channel_async_tokio
      - name: client_server_async_tokio
        run: cargo run --features "examples-tokio,draft-api" --release --verbose --example client_server_async_tokio
      - name: scatter_gather_async_tokio
        run: cargo run --features "examples-tokio,draft-api" --release --verbose --example scatter_gather_async_tokio
      - name: radio_dish_async_tokio
        run: cargo run --features "examples-tokio,draft-api" --release --verbose --example radio_dish_async_tokio

  examples-async-std:
    name: examples (async-std)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: publish_subscribe_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example publish_subscribe_async_async_std
      - name: request_reply_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example request_reply_async_async_std
      - name: dealer_reply_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example dealer_reply_async_async_std
      - name: request_router_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example request_router_async_async_std
      - name: dealer_dealer_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example dealer_dealer_async_async_std
      - name: dealer_router_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example dealer_router_async_async_std
      - name: publish_xsubscribe_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example publish_xsubscribe_async_async_std
      - name: xpublish_subscribe_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example xpublish_subscribe_async_async_std
      - name: xpublish_xsubscribe_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example xpublish_xsubscribe_async_async_std
      - name: push_pull_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example push_pull_async_async_std
      - name: pair_pair_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example pair_pair_async_async_std
      - name: stream_client_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example stream_client_async_async_std
      - name: stream_server_async_async_std
        run: cargo run --features examples-async-std --release --verbose --example stream_server_async_async_std
      - name: peer_peer_async_async_std
        run: cargo run --features "examples-async-std,draft-api" --release --verbose --example peer_peer_async_async_std
      - name: channel_channel_async_async_std
        run: cargo run --features "examples-async-std,draft-api" --release --verbose --example channel_channel_async_async_std
      - name: client_server_async_async_std
        run: cargo run --features "examples-async-std,draft-api" --release --verbose --example client_server_async_async_std
      - name: scatter_gather_async_async_std
        run: cargo run --features "examples-async-std,draft-api" --release --verbose --example scatter_gather_async_async_std
      - name: radio_dish_async_async_std
        run: cargo run --features "examples-async-std,draft-api" --release --verbose --example radio_dish_async_async_std

  examples-futures:
    name: examples (futures)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: publish_subscribe_async_futures
        run: cargo run --features examples-futures --release --verbose --example publish_subscribe_async_futures
      - name: request_reply_async_futures
        run: cargo run --features examples-futures --release --verbose --example request_reply_async_futures
      - name: dealer_reply_async_futures
        run: cargo run --features examples-futures --release --verbose --example dealer_reply_async_futures
      - name: request_router_async_futures
        run: cargo run --features examples-futures --release --verbose --example request_router_async_futures
      - name: dealer_dealer_async_futures
        run: cargo run --features examples-futures --release --verbose --example dealer_dealer_async_futures
      - name: dealer_router_async_futures
        run: cargo run --features examples-futures --release --verbose --example dealer_router_async_futures
      - name: publish_xsubscribe_async_futures
        run: cargo run --features examples-futures --release --verbose --example publish_xsubscribe_async_futures
      - name: xpublish_subscribe_async_futures
        run: cargo run --features examples-futures --release --verbose --example xpublish_subscribe_async_futures
      - name: xpublish_xsubscribe_async_futures
        run: cargo run --features examples-futures --release --verbose --example xpublish_xsubscribe_async_futures
      - name: push_pull_async_futures
        run: cargo run --features examples-futures --release --verbose --example push_pull_async_futures
      - name: pair_pair_async_futures
        run: cargo run --features examples-futures --release --verbose --example pair_pair_async_futures
      - name: stream_client_async_futures
        run: cargo run --features examples-futures --release --verbose --example stream_client_async_futures
      - name: stream_server_async_futures
        run: cargo run --features examples-futures --release --verbose --example stream_server_async_futures
      - name: peer_peer_async_futures
        run: cargo run --features "examples-futures,draft-api" --release --verbose --example peer_peer_async_futures
      - name: channel_channel_async_futures
        run: cargo run --features "examples-futures,draft-api" --release --verbose --example channel_channel_async_futures
      - name: client_server_async_futures
        run: cargo run --features "examples-futures,draft-api" --release --verbose --example client_server_async_futures
      - name: scatter_gather_async_futures
        run: cargo run --features "examples-futures,draft-api" --release --verbose --example scatter_gather_async_futures
      - name: radio_dish_async_futures
        run: cargo run --features "examples-futures,draft-api" --release --verbose --example radio_dish_async_futures
